{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/jairajmehra/Desktop/Redlitchee/web_qgis/src/app/map/%5Btype%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { useLoadScript, GoogleMap } from '@react-google-maps/api';\nimport { useParams, useRouter } from 'next/navigation';\n\nexport default function MapPage() {\n  const params = useParams();\n  const router = useRouter();\n  const folderId = params.type as string;\n  const [isValidFolder, setIsValidFolder] = useState<boolean | null>(null);\n\n  const { isLoaded } = useLoadScript({\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || \"AIzaSyC6TRmdiA0WTKEI8dUjW96GpRq5oXp9VnM\",\n  });\n\n  const center = { lat: 23.0225, lng: 72.5714 }; // Default center (Ahmedabad)\n\n  useEffect(() => {\n    const checkFolderExists = async () => {\n      try {\n        const response = await fetch(`http://192.168.29.3:5005/check_folder_id?folder_id=${folderId}`);\n        const data = await response.json();\n        \n        if (!response.ok) {\n          throw new Error(data.error || 'Failed to check folder');\n        }\n\n        setIsValidFolder(data.exists);\n        \n        // If folder doesn't exist, show 404 message\n        if (!data.exists) {\n          console.error('Folder not found:', folderId);\n        }\n      } catch (error) {\n        console.error('Error checking folder:', error);\n        setIsValidFolder(false);\n      }\n    };\n\n    if (folderId) {\n      checkFolderExists();\n    }\n  }, [folderId]);\n\n  const createCustomTileLayer = () => {\n    return new google.maps.ImageMapType({\n      getTileUrl: function(coord, zoom) {\n        const url = `http://192.168.29.3:5005/tile_output/${folderId}/tiles/${zoom}/${coord.x}/${coord.y}.png`;\n        \n        // Log tile requests for debugging\n        console.log('Requesting tile:', url);\n        \n        // Add error handling for tile loading\n        const img = new Image();\n        img.onerror = () => {\n          console.log('Tile not found:', url);\n          return ''; // Return empty string for missing tiles\n        };\n        \n        return url;\n      },\n      tileSize: new google.maps.Size(256, 256),\n      maxZoom: 19,\n      minZoom: 0,\n      name: 'Custom',\n      opacity: 0.75\n    });\n  };\n\n  const onMapLoad = (map: google.maps.Map) => {\n    console.log('Map loaded, adding tile layer for folder:', folderId);\n    const customTileLayer = createCustomTileLayer();\n    map.overlayMapTypes.push(customTileLayer);\n  };\n\n  // Show loading state while checking folder\n  if (isValidFolder === null) {\n    return <div className=\"h-screen w-screen flex items-center justify-center\">\n      <p className=\"text-xl\">Loading...</p>\n    </div>;\n  }\n\n  // Show 404 if folder doesn't exist\n  if (!isValidFolder) {\n    return (\n      <div className=\"h-screen w-screen flex flex-col items-center justify-center bg-gray-50\">\n        <h1 className=\"text-4xl font-bold text-gray-800 mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-8\">Map not found</p>\n        <button \n          onClick={() => router.push('/')}\n          className=\"px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\n        >\n          Go Home\n        </button>\n      </div>\n    );\n  }\n\n  if (!isLoaded) return <div>Loading map...</div>;\n\n  return (\n    <div className=\"h-screen w-screen\">\n      <GoogleMap\n        zoom={10}\n        center={center}\n        mapContainerClassName=\"w-full h-full\"\n        options={{\n          mapTypeId: 'satellite',\n          disableDefaultUI: false\n        }}\n        onLoad={onMapLoad}\n      />\n    </div>\n  );\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}